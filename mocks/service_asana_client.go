// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/pasha1980/asanaclient/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// ServiceAsanaClient is an autogenerated mock type for the AsanaClient type
type ServiceAsanaClient struct {
	mock.Mock
}

type ServiceAsanaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceAsanaClient) EXPECT() *ServiceAsanaClient_Expecter {
	return &ServiceAsanaClient_Expecter{mock: &_m.Mock}
}

// FetchProjects provides a mock function with given fields: _a0, _a1
func (_m *ServiceAsanaClient) FetchProjects(_a0 context.Context, _a1 service.FetchInput) (service.FetchOutput[service.Project], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FetchProjects")
	}

	var r0 service.FetchOutput[service.Project]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.FetchInput) (service.FetchOutput[service.Project], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.FetchInput) service.FetchOutput[service.Project]); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(service.FetchOutput[service.Project])
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.FetchInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAsanaClient_FetchProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchProjects'
type ServiceAsanaClient_FetchProjects_Call struct {
	*mock.Call
}

// FetchProjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 service.FetchInput
func (_e *ServiceAsanaClient_Expecter) FetchProjects(_a0 interface{}, _a1 interface{}) *ServiceAsanaClient_FetchProjects_Call {
	return &ServiceAsanaClient_FetchProjects_Call{Call: _e.mock.On("FetchProjects", _a0, _a1)}
}

func (_c *ServiceAsanaClient_FetchProjects_Call) Run(run func(_a0 context.Context, _a1 service.FetchInput)) *ServiceAsanaClient_FetchProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.FetchInput))
	})
	return _c
}

func (_c *ServiceAsanaClient_FetchProjects_Call) Return(_a0 service.FetchOutput[service.Project], _a1 error) *ServiceAsanaClient_FetchProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAsanaClient_FetchProjects_Call) RunAndReturn(run func(context.Context, service.FetchInput) (service.FetchOutput[service.Project], error)) *ServiceAsanaClient_FetchProjects_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUsers provides a mock function with given fields: _a0, _a1
func (_m *ServiceAsanaClient) FetchUsers(_a0 context.Context, _a1 service.FetchInput) (service.FetchOutput[service.User], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FetchUsers")
	}

	var r0 service.FetchOutput[service.User]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.FetchInput) (service.FetchOutput[service.User], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.FetchInput) service.FetchOutput[service.User]); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(service.FetchOutput[service.User])
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.FetchInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAsanaClient_FetchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUsers'
type ServiceAsanaClient_FetchUsers_Call struct {
	*mock.Call
}

// FetchUsers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 service.FetchInput
func (_e *ServiceAsanaClient_Expecter) FetchUsers(_a0 interface{}, _a1 interface{}) *ServiceAsanaClient_FetchUsers_Call {
	return &ServiceAsanaClient_FetchUsers_Call{Call: _e.mock.On("FetchUsers", _a0, _a1)}
}

func (_c *ServiceAsanaClient_FetchUsers_Call) Run(run func(_a0 context.Context, _a1 service.FetchInput)) *ServiceAsanaClient_FetchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.FetchInput))
	})
	return _c
}

func (_c *ServiceAsanaClient_FetchUsers_Call) Return(_a0 service.FetchOutput[service.User], _a1 error) *ServiceAsanaClient_FetchUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAsanaClient_FetchUsers_Call) RunAndReturn(run func(context.Context, service.FetchInput) (service.FetchOutput[service.User], error)) *ServiceAsanaClient_FetchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FetchWorkspaces provides a mock function with given fields: _a0
func (_m *ServiceAsanaClient) FetchWorkspaces(_a0 context.Context) ([]service.Workspace, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkspaces")
	}

	var r0 []service.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]service.Workspace, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []service.Workspace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAsanaClient_FetchWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWorkspaces'
type ServiceAsanaClient_FetchWorkspaces_Call struct {
	*mock.Call
}

// FetchWorkspaces is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *ServiceAsanaClient_Expecter) FetchWorkspaces(_a0 interface{}) *ServiceAsanaClient_FetchWorkspaces_Call {
	return &ServiceAsanaClient_FetchWorkspaces_Call{Call: _e.mock.On("FetchWorkspaces", _a0)}
}

func (_c *ServiceAsanaClient_FetchWorkspaces_Call) Run(run func(_a0 context.Context)) *ServiceAsanaClient_FetchWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ServiceAsanaClient_FetchWorkspaces_Call) Return(_a0 []service.Workspace, _a1 error) *ServiceAsanaClient_FetchWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceAsanaClient_FetchWorkspaces_Call) RunAndReturn(run func(context.Context) ([]service.Workspace, error)) *ServiceAsanaClient_FetchWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceAsanaClient creates a new instance of ServiceAsanaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAsanaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAsanaClient {
	mock := &ServiceAsanaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
